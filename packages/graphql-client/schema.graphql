schema {
  query: Query
  mutation: Mutation
}

type AddAddressMutation {
  address: AddressType
}

input AddToCartInput {
  productId: String
  quantity: Int
  variationId: String
}

type AddToCartMutation {
  cart: CartType
}

input AddressInput {
  name: String
  pincode: String
  state: String
  country: String
  city: String
  town: String
  apartmentNo: String
  isPrimary: Boolean
  isWork: Boolean
  isHome: Boolean
  phoneNumber: String
}

type AddressType {
  id: ID!
  name: String!
  pincode: String!
  state: String!
  country: String!
  city: String!
  town: String!
  apartmentNo: String!
  isWork: Boolean!
  isHome: Boolean!
  phoneNumber: String!
  customerSet: [CustomerType!]!
  defaultAddress: CustomerType
  orderitemSet: [OrderItemType!]!
}

type ArchiveAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type CartProductType {
  product: ProductType
  price: Int
  variation: VariationType
  quantity: Int
  totalPrice: Int
}

type CartType {
  cartLength: Int
  totalPrice: Int
  products: [CartProductType]
}

type CategoryType {
  description: String
  gender: String
  id: ID
  image: String!
  name: String!
}

type ChangeDefaultAddressMutation {
  address: AddressType
}

type CheckoutIdType {
  checkoutId: String
}

type CheckoutSecretType {
  checkoutSecret: String
}

type ClearCartMutation {
  removed: Boolean
}

type CreateOrderMutation {
  order: OrderNode
  orderItems: [OrderItemType]
}

type CustomerType {
  user: UserType!
  phoneNumber: String!
  Addresses: [AddressType!]!
  defaultAddress: AddressType
  isVerified: Boolean!
  verifiedBy: CustomerVerifiedBy!
  joinedOn: Date!
  orderSet(offset: Int, before: String, after: String, first: Int, last: Int): OrderNodeConnection!
  orderitemSet: [OrderItemType!]!
}

enum CustomerVerifiedBy {
  A_1
  A_2
}

scalar Date

scalar DateTime

type DeleteAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type DeleteAddressMutation {
  success: Boolean
}

scalar ExpectedErrorType

input FilterInput {
  categories: [String]
  genders: [String]
  subCategories: [String]
  brands: [String]
  variantFilters: [VariantsFilterInput]
  tags: [String]
}

type FilterType {
  genders: [String]
  categories: [String]
  subCategoriesFilters: [String]
  variationFilters: [sub_filter]
  brands: [String]
  tags: [String]
}

scalar GenericScalar

scalar JSONString

type Mutation {
  updateFilters(filter: FilterInput): UpdateFilterMutation
  socialAuth(code: String, provider: String): SocialAuth
  createOrder(input: OrderInput): CreateOrderMutation
  register(isCustomer: String, email: String!, username: String!, password1: String!, password2: String!): Register
  verifyAccount(token: String!): VerifyAccount
  resendActivationEmail(email: String!): ResendActivationEmail
  sendPasswordResetEmail(email: String!): SendPasswordResetEmail
  passwordReset(token: String!, newPassword1: String!, newPassword2: String!): PasswordReset
  passwordSet(token: String!, newPassword1: String!, newPassword2: String!): PasswordSet
  passwordChange(oldPassword: String!, newPassword1: String!, newPassword2: String!): PasswordChange
  updateAccount(firstName: String, lastName: String): UpdateAccount
  archiveAccount(password: String!): ArchiveAccount
  deleteAccount(password: String!): DeleteAccount
  sendSecondaryEmailActivation(email: String!, password: String!): SendSecondaryEmailActivation
  verifySecondaryEmail(token: String!): VerifySecondaryEmail
  swapEmails(password: String!): SwapEmails
  removeSecondaryEmail(password: String!): RemoveSecondaryEmail
  tokenAuth(password: String!, email: String, username: String): ObtainJSONWebToken
  verifyToken(token: String!): VerifyToken
  refreshToken(refreshToken: String!): RefreshToken
  revokeToken(refreshToken: String!): RevokeToken
  addAddress(address: AddressInput): AddAddressMutation
  changeDefaultAddress(addressId: String): ChangeDefaultAddressMutation
  updateAddress(addressId: String, updateValues: AddressInput): UpdateAddressMutation
  deleteAddress(addressId: String): DeleteAddressMutation
  AddToCart(productdetails: AddToCartInput): AddToCartMutation
  ClearCart: ClearCartMutation
  UpdateCart(Input: UpdateCartInput): UpdateCartMutation
  createProduct(pd: ProductInput): createProduct
}

interface Node {
  id: ID!
}

type ObtainJSONWebToken {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  refreshToken: String
}

input OrderInput {
  addressId: String
  isPrimary: Boolean
}

type OrderItemType {
  id: ID!
  order: OrderNode!
  productId: String!
  variationId: String!
  Amount: Int!
  Customer: CustomerType!
  Address: AddressType!
  Quantity: Int!
  OrderDate: DateTime!
  details: String
  paid: Boolean!
  fullfillmentStatus: String!
  product: ProductType
  variation: VariationType
  totalAmount: Int
}

type OrderNode implements Node {
  id: ID!
  Customer: CustomerType!
  paid: Boolean!
  paymentMethod: OrderPaymentMethod!
  paymentId: String!
  paymentStatus: OrderPaymentStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  extraCharges: Int!
  orderitemSet: [OrderItemType!]!
  totalAmount: Int
}

type OrderNodeConnection {
  pageInfo: PageInfo!
  edges: [OrderNodeEdge]!
}

type OrderNodeEdge {
  node: OrderNode
  cursor: String!
}

enum OrderPaymentMethod {
  A_0
  A_1
}

enum OrderPaymentStatus {
  INITIATED
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PasswordChange {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type PasswordReset {
  success: Boolean
  errors: ExpectedErrorType
}

type PasswordSet {
  success: Boolean
  errors: ExpectedErrorType
}

input ProductInput {
  name: String
  brand: String
  Category: String
  Discription: String
  Variations: [VariationInput]
  tags: [String]
  images: [String]
  available: Boolean
}

type ProductType {
  available: Boolean
  brand: String
  category: CategoryType
  description: String
  id: ID
  images: [String]
  name: String
  tags: [String]
  variations: [VariationType]
  availableVariants: JSONString
  pageNo: Int
}

type ProductsType {
  products: [ProductType]
  totalProducts: Int
  pageNo: Int
  totalPages: Int
}

type Query {
  filters: FilterType
  checkoutId: CheckoutIdType
  checkoutSecret: CheckoutSecretType
  orders(offset: Int, before: String, after: String, first: Int, last: Int, id: ID, Customer: ID, paid: Boolean, paymentMethod: String, paymentStatus: String, createdAt: DateTime, updatedAt: DateTime, extraCharges: Int, orderBy: String): OrderNodeConnection
  orderItems(orderId: String): [OrderItemType]
  order(id: String, getCurrent: Boolean): OrderNode
  me: UserType
  user(id: ID!): UserNode
  users(offset: Int, before: String, after: String, first: Int, last: Int, email: String, username: String, username_Icontains: String, username_Istartswith: String, isActive: Boolean, status_Archived: Boolean, status_Verified: Boolean, status_SecondaryEmail: String): UserNodeConnection
  customer: CustomerType
  customers: [CustomerType]
  defaultAddress: AddressType
  addresses: [AddressType]
  cart: CartType
  Products(filter: FilterInput, pageNb: Int = 1): ProductsType
  product(id: String): ProductType
  categories: [CategoryType]
}

type RefreshToken {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
}

type Register {
  success: Boolean
  errors: ExpectedErrorType
  refreshToken: String
  token: String
}

type RemoveSecondaryEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type ResendActivationEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type RevokeToken {
  revoked: Int
  success: Boolean
  errors: ExpectedErrorType
}

type SendPasswordResetEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type SendSecondaryEmailActivation {
  success: Boolean
  errors: ExpectedErrorType
}

type SocialAuth {
  user: UserType
  token: String
}

type SwapEmails {
  success: Boolean
  errors: ExpectedErrorType
}

type UpdateAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type UpdateAddressMutation {
  address: AddressType
}

input UpdateCartInput {
  productId: String
  variationId: String
  quantity: Int
  price: Int
}

type UpdateCartMutation {
  cart: CartType
}

type UpdateFilterMutation {
  updatedFilters: FilterType
}

type UserNode implements Node {
  id: ID!
  lastLogin: DateTime
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  isCustomer: Boolean!
  customer: CustomerType
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserNodeConnection {
  pageInfo: PageInfo!
  edges: [UserNodeEdge]!
}

type UserNodeEdge {
  node: UserNode
  cursor: String!
}

type UserType {
  id: ID!
  lastLogin: DateTime
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  isActive: Boolean!
  dateJoined: DateTime!
  isCustomer: Boolean!
  customer: CustomerType
  password: String!
  isSuperuser: Boolean!
}

type VariantType {
  id: ID
  name: String
  value: String
}

input VariantsFilterInput {
  name: [String]
  values: [String]
}

input VariationInput {
  type: String
  typeName: String
  typeVariation: String
  quantity: Int
  available: Boolean
  price: Int
  discountPercent: Int
}

type VariationType {
  Id: ID!
  available: Boolean
  discountPercent: Int
  images: [String]
  price: Int!
  quantity: Int
  sku: ID
  variant: [VariantType]
}

type VerifyAccount {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifySecondaryEmail {
  success: Boolean
  errors: ExpectedErrorType
}

type VerifyToken {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
}

type createProduct {
  product: ProductType
}

type sub_filter {
  filter: String
  values: [String]
}
